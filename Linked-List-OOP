class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        """Add a node with the given data to the end of the list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return

        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        """Print all nodes in the list."""
        current = self.head
        if not current:
            print("List is empty.")
            return

        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        """Delete the nth node (1-based index) from the list."""
        if not self.head:
            raise IndexError("Cannot delete from an empty list.")

        if n <= 0:
            raise IndexError("Index must be 1 or higher.")

        if n == 1:
            print(f"Deleting node at position 1 with value: {self.head.data}")
            self.head = self.head.next
            return

        current = self.head
        for _ in range(n - 2):
            if not current.next:
                raise IndexError("Index out of range.")
            current = current.next

        if not current.next:
            raise IndexError("Index out of range.")

        print(f"Deleting node at position {n} with value: {current.next.data}")
        current.next = current.next.next


# === Test the implementation ===

if __name__ == "__main__":
    ll = LinkedList()
    
    # Append values
    for value in [10, 20, 30, 40, 50]:
        ll.append(value)

    print("Original list:")
    ll.print_list()

    # Delete the 3rd node
    ll.delete_nth_node(3)
    print("\nList after deleting 3rd node:")
    ll.print_list()

    # Delete the 1st node
    ll.delete_nth_node(1)
    print("\nList after deleting 1st node:")
    ll.print_list()

    # Attempt to delete an out-of-range node
    try:
        ll.delete_nth_node(10)
    except IndexError as e:
        print(f"\nException caught: {e}")
